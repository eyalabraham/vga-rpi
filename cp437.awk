#
# cp437.awk
#
#   Process BDF font file and produce a C header file with font information.
#   Header file will contain only the 256 font glyphs for Code Page 437.
#   Tested with fonts that have 8-bit width.
#   Source: https://en.wikipedia.org/wiki/Glyph_Bitmap_Distribution_Format
#   Usage: 'awk -f cp437.awk <bdf_file>
#
#   Created: April 17. 2019
#

BEGIN               {   split(ARGV[1], hfile, ".")
                        printf("/*\n")
                        printf(" * This header file was generated by: cp437.awk\n")
                        printf(" * BDF file source: https://github.com/farsil/ibmfonts.\n")
                        printf(" * BDF file format: https://en.wikipedia.org/wiki/Glyph_Bitmap_Distribution_Format\n")
                        printf(" *\n")
                        printf(" * Input file: %s\n", ARGV[1])
                        printf(" *\n")
                        printf(" */\n\n")
                        printf("#ifndef __%s_h__\n", hfile[1])
                        printf("#define __%s_h__\n", hfile[1])
                        printf("\n")

                        flag_first_char = 1
                        flag_processing_char = 0
                        
                        #
                        # Mapping source: https://int10h.org/oldschool-pc-fonts/readme/#packcontents
                        #
                        cp473_to_unicode[128] = 199
                        cp473_to_unicode[129] = 252
                        cp473_to_unicode[130] = 233
                        cp473_to_unicode[131] = 226
                        cp473_to_unicode[132] = 228
                        cp473_to_unicode[133] = 224
                        cp473_to_unicode[134] = 229
                        cp473_to_unicode[135] = 231
                        cp473_to_unicode[136] = 234
                        cp473_to_unicode[137] = 235
                        cp473_to_unicode[138] = 232
                        cp473_to_unicode[139] = 239
                        cp473_to_unicode[140] = 238
                        cp473_to_unicode[141] = 236
                        cp473_to_unicode[142] = 196
                        cp473_to_unicode[143] = 197
                        cp473_to_unicode[144] = 201
                        cp473_to_unicode[145] = 230
                        cp473_to_unicode[146] = 198
                        cp473_to_unicode[147] = 244
                        cp473_to_unicode[148] = 246
                        cp473_to_unicode[149] = 242
                        cp473_to_unicode[150] = 251
                        cp473_to_unicode[151] = 249
                        cp473_to_unicode[152] = 255
                        cp473_to_unicode[153] = 214
                        cp473_to_unicode[154] = 220
                        cp473_to_unicode[155] = 162
                        cp473_to_unicode[156] = 163
                        cp473_to_unicode[157] = 165
                        cp473_to_unicode[158] = 8359
                        cp473_to_unicode[159] = 402
                        cp473_to_unicode[160] = 225
                        cp473_to_unicode[161] = 237
                        cp473_to_unicode[162] = 243
                        cp473_to_unicode[163] = 250
                        cp473_to_unicode[164] = 241
                        cp473_to_unicode[165] = 209
                        cp473_to_unicode[166] = 170
                        cp473_to_unicode[167] = 186
                        cp473_to_unicode[168] = 191
                        cp473_to_unicode[169] = 8976
                        cp473_to_unicode[170] = 172
                        cp473_to_unicode[171] = 189
                        cp473_to_unicode[172] = 188
                        cp473_to_unicode[173] = 161
                        cp473_to_unicode[174] = 171
                        cp473_to_unicode[175] = 187
                        cp473_to_unicode[176] = 9617
                        cp473_to_unicode[177] = 9618
                        cp473_to_unicode[178] = 9619
                        cp473_to_unicode[179] = 9474
                        cp473_to_unicode[180] = 9508
                        cp473_to_unicode[181] = 9569
                        cp473_to_unicode[182] = 9570
                        cp473_to_unicode[183] = 9558
                        cp473_to_unicode[184] = 9557
                        cp473_to_unicode[185] = 9571
                        cp473_to_unicode[186] = 9553
                        cp473_to_unicode[187] = 9559
                        cp473_to_unicode[188] = 9565
                        cp473_to_unicode[189] = 9564
                        cp473_to_unicode[190] = 9563
                        cp473_to_unicode[191] = 9488
                        cp473_to_unicode[192] = 9492
                        cp473_to_unicode[193] = 9524
                        cp473_to_unicode[194] = 9516
                        cp473_to_unicode[195] = 9500
                        cp473_to_unicode[196] = 9472
                        cp473_to_unicode[197] = 9532
                        cp473_to_unicode[198] = 9566
                        cp473_to_unicode[199] = 9567
                        cp473_to_unicode[200] = 9562
                        cp473_to_unicode[201] = 9556
                        cp473_to_unicode[202] = 9577
                        cp473_to_unicode[203] = 9574
                        cp473_to_unicode[204] = 9568
                        cp473_to_unicode[205] = 9552
                        cp473_to_unicode[206] = 9580
                        cp473_to_unicode[207] = 9575
                        cp473_to_unicode[208] = 9567
                        cp473_to_unicode[209] = 9572
                        cp473_to_unicode[210] = 9573
                        cp473_to_unicode[211] = 9561
                        cp473_to_unicode[212] = 9560
                        cp473_to_unicode[213] = 9554
                        cp473_to_unicode[214] = 9555
                        cp473_to_unicode[215] = 9579
                        cp473_to_unicode[216] = 9578
                        cp473_to_unicode[217] = 9496
                        cp473_to_unicode[218] = 9484
                        cp473_to_unicode[219] = 9608
                        cp473_to_unicode[220] = 9604
                        cp473_to_unicode[221] = 9612
                        cp473_to_unicode[222] = 9616
                        cp473_to_unicode[223] = 9600
                        cp473_to_unicode[224] = 954
                        cp473_to_unicode[225] = 223
                        cp473_to_unicode[226] = 915
                        cp473_to_unicode[227] = 960
                        cp473_to_unicode[228] = 931
                        cp473_to_unicode[229] = 963
                        cp473_to_unicode[230] = 181
                        cp473_to_unicode[231] = 964
                        cp473_to_unicode[232] = 934
                        cp473_to_unicode[233] = 920
                        cp473_to_unicode[234] = 937
                        cp473_to_unicode[235] = 948
                        cp473_to_unicode[236] = 8734
                        cp473_to_unicode[237] = 966
                        cp473_to_unicode[238] = 949
                        cp473_to_unicode[239] = 8745
                        cp473_to_unicode[240] = 8801
                        cp473_to_unicode[241] = 177
                        cp473_to_unicode[242] = 8805
                        cp473_to_unicode[243] = 8804
                        cp473_to_unicode[244] = 8992
                        cp473_to_unicode[245] = 8993
                        cp473_to_unicode[246] = 247
                        cp473_to_unicode[247] = 8776
                        cp473_to_unicode[248] = 176
                        cp473_to_unicode[249] = 8729
                        cp473_to_unicode[250] = 183
                        cp473_to_unicode[251] = 8730
                        cp473_to_unicode[252] = 8319
                        cp473_to_unicode[253] = 178
                        cp473_to_unicode[254] = 9632
                        cp473_to_unicode[255] = 160
                    }

/FONTBOUNDINGBOX/   {   split($0, f, " ")
                        font_max_width = f[2]
                        font_max_height = f[3]
                        font_orig_x = f[4]
                        font_orig_y = f[5]
                        printf("#define FONTW %d\n", font_max_width)
                        printf("#define FONTH %d\n", font_max_height)
                        printf("\n")
                        printf("#include    <stdint.h>\n")
                        printf("\n")
                        printf("uint8_t font_img[][FONTH] = {\n")
                    }

/STARTCHAR/         {   split($0, f, " ")
                        flag_processing_char = 1

                        while ( flag_processing_char )
                        {
                            getline
                            split($0, f, " ")

                            if ( f[1] == "BBX" )
                            {
                                glyph_width = f[2]
                                glyph_height = f[3]
                                glyph_orig_x = f[4]
                                glyph_shift = 2^glyph_orig_x
                                glyph_orig_y = f[5]

                                glyph_top_padding = (font_orig_y + font_max_height - 1) - (glyph_orig_y + glyph_height - 1)
                                glyph_bottom_padding = glyph_orig_y - font_orig_y
                            }

                            if ( f[1] == "ENCODING" )
                            {
                                char_unicode = f[2]
                            }

                            if ( f[1] == "BITMAP" )
                            {
                                glyph_header_string = "{"
                                for (i = 0; i < font_max_height; i++)
                                {
                                    if ( i < glyph_top_padding )
                                        glyph_header_string = (glyph_header_string  sprintf("0x00"))
                                    if ( i >= glyph_top_padding && i < (glyph_height + glyph_top_padding) )
                                    {
                                        getline
                                        n = sprintf("%d", ("0x"$0))
                                        n = n / glyph_shift
                                        glyph_header_string = (glyph_header_string  sprintf("0x%02x", n))
                                    }
                                    if ( i >= (glyph_height + glyph_top_padding) )
                                        glyph_header_string = (glyph_header_string  sprintf("0x00"))
                                    if ( i < (font_max_height-1) )
                                        glyph_header_string = (glyph_header_string  sprintf(", "))
                                }
                                glyph_header_string = (glyph_header_string  "}")
                            }

                            if ( f[1] == "ENDCHAR" )
                            {
                                glyph_list[char_unicode] = glyph_header_string
                                flag_processing_char = 0
                            }
                        }
                    }

END                 {   for (i = 0; i < 128; i++)
                            printf("        // ASCII %d\n        %s,\n", i, glyph_list[i])
                        
                        for (i = 128; i < 255; i++)
                            printf("        // ASCII %d\n        %s,\n", i, glyph_list[cp473_to_unicode[i]])
                        
                        printf("        // ASCII 255\n        %s\n", glyph_list[cp473_to_unicode[255]])
                        
                        printf("};\n\n")
                        printf("#endif  /* __%s_h__ */\n", hfile[1])
                    }
